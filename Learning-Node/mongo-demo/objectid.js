/*
_id: 24 character string
2 chars = 1 bytes
12 bytes to uniquely identify a document in a db
    first 4 bytes represent timestamp (time this document was created)
    (thus no need for created at: because this property is included in the timestamp)

    3 bytes : machine identifier

    2 bytes : process identifier

    3 bytes : counter (for 2 diff documents on same machine on same process at same time, counter types 
        will be diff)

    very very less chance of same id generation (almost unique)

*/

/*
in sql or relational, there is a mechanism for generating ids, they are fetched and incremented 
by 1 from previous one. this approach guarantees uniqueness but it hurts scalability

in mongo db, this id is not generated by mongo db itself
it is generated by mongo db driver

mongo db driver talks to mongo db
we don't have to wait mongo db to generate id, it's generated by driver
mongoose is an abstraction over mongodb driver
we can also explicitly generate an id
*/

const mongoose = require('mongoose');
const id = new mongoose.Types.ObjectId();
console.log(id);
console.log(id.getTimestamp());
const isValid = mongoose.Types.ObjectId.isValid('1234');
console.log(isValid);